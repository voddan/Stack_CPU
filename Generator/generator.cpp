#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

string arr_top[] = {
"; 64-bit \"Hello World!\" in Linux NASM               " ,
"global main                                           " ,
"                                                      " ,
"extern dump_obj                                       " ,
"extern init_obj                                       " ,
"extern del_obj                                        " ,
"                                                      " ,
"extern obj;                                           " ,
"extern head;                                          " ,
"                                                      " ,
";extern Obj_execute;                                  " ,
"                                                      " ,
"section .text                                         " ,
"main:                                                 " ,
"	; sys_write(stdout, message, length)           " ,
"	mov    rax, 1        ; sys_write               " ,
"	mov    rdi, 1        ; stdout                  " ,
"	mov    rsi, message_start                      " ,
"	mov    rdx, message_start_len                  " ,
"	syscall                                        " ,
"	;;;;;;;;;;;;;;;;;;;;;;;;                       " ,
"	                                               " 
};

string arr_bottom[] = {
"	                                               " ,
"	;;;;;;;;;;;;;;;;;;;;;;;                        " ,
"	; sys_write(stdout, message, length)           " ,
"	                                               " ,
"	mov    rax, 1        ; sys_write               " ,
"	mov    rdi, 1        ; stdout                  " ,
"	mov    rsi, message_finish                     " ,
"	mov    rdx, message_finish_len                 " ,
"	syscall                                        " ,
"	                                               " ,
"	; sys_exit(return_code)                        " ,
"	                                               " ,
"	mov    rax, 60        ; sys_exit               " ,
"	mov    rdi, 0        ; return 0 (success)      " ,
"	syscall                                        " ,
"                                                      " ,
"section .data                                         " ,
"message_start:		db 'started..' ,0x0A           " ,
"message_start_len 	equ $-message_start            " ,
"                                                      " ,
"message_finish:		db 'finished..',0x0A   " ,
"message_finish_len 	equ $-message_finish           " 
};

int main() {
	vector<string> template_top 	(arr_top, arr_top + sizeof arr_top / sizeof arr_top[0]);
	vector<string> template_bottom 	(arr_bottom, arr_bottom + sizeof arr_bottom / sizeof arr_bottom[0]);
	
	ofstream output("gen.asm");
	
	output << ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" << endl;
	output << ";; this file was generated by generator.cpp" << endl;
	output << ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" << endl;
	for ( vector<string>::const_iterator iter = template_top.begin();
			iter != template_top.end(); iter ++ ) {
		output << *iter << endl;	
	}
	
	output << "	call init_obj" << endl;
	output << "	call del_obj"  << endl;
	
	
	
	for ( vector<string>::const_iterator iter = template_bottom.begin();
			iter != template_bottom.end(); iter ++ ) {
		output << *iter << endl;	
	}
	
	return 0;
}

