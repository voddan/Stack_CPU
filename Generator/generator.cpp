#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

#include <linker.hpp>
#include <stack_cpu.hpp>
#include <command_set.hpp>

using namespace linker;
using namespace stack_cpu;
using namespace command_set;

string arr_top[] = {
";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;           " ,
";; this file was generated by generator.cpp           " ,
";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;           " ,
"                                                      " ,
"; 64-bit \"Hello World!\" in Linux NASM               " ,
"global main                                           " ,
"                                                      " ,
"section .text                                         " ,
"main:                                                 " ,
"	; sys_write(stdout, message, length)           " ,
"	mov    rax, 1        ; sys_write               " ,
"	mov    rdi, 1        ; stdout                  " ,
"	mov    rsi, message_start                      " ,
"	mov    rdx, message_start_len                  " ,
"	syscall                                        " ,
"	;;;;;;;;;;;;;;;;;;;;;;;;                       " ,
"	                                               " 
};

string arr_bottom[] = {
"	                                               " ,
"	;;;;;;;;;;;;;;;;;;;;;;;                        " ,
"	; sys_write(stdout, message, length)           " ,
"	                                               " ,
"	mov    rax, 1        ; sys_write               " ,
"	mov    rdi, 1        ; stdout                  " ,
"	mov    rsi, message_finish                     " ,
"	mov    rdx, message_finish_len                 " ,
"	syscall                                        " ,
"	                                               " ,
"	; sys_exit(return_code)                        " ,
"	                                               " ,
"	mov    rax, 60        ; sys_exit               " ,
"	mov    rdi, 0        ; return 0 (success)      " ,
"	syscall                                        " ,
"                                                      " ,
"section .data                                         " ,
"message_start:		db '~~started..' ,0x0A         " ,
"message_start_len 	equ $-message_start            " ,
"                                                      " ,
"message_finish:	db '~~finished..',0x0A         " ,
"message_finish_len 	equ $-message_finish           " 
};

void assembly_instructions(ostream& stream) {
	while( Linker::has_instruction() ) {
		stream << "label_" << hex << Linker::get_ip_register() << "_:" << endl;
		
		wchar_t head = Linker::read_head();
		
		debug( "#! run_instructions" );
		debug( hex << head << dec );
		
		// unnecessary packing-unpacking into Instruct
		Instruct instruct = head_unpack(head);
		
		bool has_arg = instruct.has_arg();
		Code    code = instruct.code();
		Reg       r1 = instruct.r1();
		Reg       r2 = instruct.r2();
		Reg       r3 = instruct.r3();
		
		if( !has_arg ) {
			debug( "#! no arguments\n" );
			Linker::run_assembly_reg(stream, code, r1, r2, r3);
		} else {
			debug( "#! has an argument\n" );
			int arg = Linker::read_arg();
			Linker::run_assembly_arg(stream, code, r1, arg);
		}
		stream << endl;
	}
}

void write_template(ostream& stream, vector<string> arr) {
	for ( vector<string>::const_iterator iter = arr.begin();
			iter != arr.end(); iter ++ ) {
		stream << *iter << endl;	
	}
}

int main() {
	vector<string> template_top 	(arr_top, arr_top + sizeof arr_top / sizeof arr_top[0]);
	vector<string> template_bottom 	(arr_bottom, arr_bottom + sizeof arr_bottom / sizeof arr_bottom[0]);
	
	ofstream output("gen.asm");
	//ofstream output("gen.asm");
	
	write_template(output, template_top);
	////////////////////////////////
	
	output << "extern init" << endl;
	output << "extern run_command_arg" << endl;
	output << "extern run_command_reg" << endl;
	output << "extern dump_registers_val" << endl;
	output << endl;
	
	output << "call init" << endl;
	output << endl;
	
	cout << "top template is done" << endl;
	////////////////////////////////
	
	output << "call dump_registers_val" << endl;
	output << endl;
	
	////////////////////////////////
	
	// just change the registers somehow
	
	unsigned instruction_pointer = 0;
	Linker::load_ip_register(&instruction_pointer);
	
	Linker::add_assembly_arg(SET::assembly_indexed());
	Linker::add_assembly_arg(JMP::assembly_indexed());
	
	Linker::add_assembly_reg(ADD::assembly_indexed());
	Linker::add_assembly_reg(MOV::assembly_indexed());
	Linker::add_assembly_reg(RET::assembly_indexed());
	
	cout << "assembly functions are loaded" << endl;
	
	ifstream input("ded.out");
	//ifstream input("a.out");
	Linker::load_instructions(input);
	
	cout << "instructions are loaded" << endl;
	
	Linker::dump_instructions(cout);
	cout << endl;
	
	//Linker::dump_assembly_arg(cout);
	//Linker::dump_assembly_reg(cout);
	
	//!!!!!
	assembly_instructions(output);
	//!!!!!
	output << "end:" << endl;
	////////////////////////////////
	
	output << "call dump_registers_val" << endl;
	output << endl;
	
	/////////////////////////////////
	write_template(output, template_bottom);
	cout << "top template is done" << endl;
	
	return 0;
}

